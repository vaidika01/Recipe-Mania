{"ast":null,"code":"import axios from \"axios\";\n\n// Create an axios instance\nconst axiosInstance = axios.create({\n  baseURL: \"http://localhost:5000/api\",\n  // Base URL of your API\n  headers: {\n    \"Content-Type\": \"application/json\"\n  }\n});\n\n// Request interceptor to add the auth token to headers\naxiosInstance.interceptors.request.use(config => {\n  const token = localStorage.getItem(\"token\");\n  console.log(\"Intercepted request token:\", token); // Debug log\n  if (token) {\n    config.headers.Authorization = `Bearer ${token}`;\n  }\n  return config;\n}, error => {\n  console.error(\"Request interceptor error:\", error); // Debug log\n  return Promise.reject(error);\n});\n\n// Response interceptor to handle token refresh\naxiosInstance.interceptors.response.use(response => {\n  return response;\n}, async error => {\n  const originalRequest = error.config;\n\n  // Check if the error is due to an expired token\n  if (error.response && error.response.status === 401 && !originalRequest._retry) {\n    originalRequest._retry = true;\n    try {\n      // Attempt to refresh the token\n      const {\n        refreshToken\n      } = await refreshToken(localStorage.getItem(\"refreshToken\"));\n\n      // Save the new tokens\n      localStorage.setItem(\"token\", refreshToken);\n\n      // Update the Authorization header\n      axiosInstance.defaults.headers.common[\"Authorization\"] = `Bearer ${refreshToken}`;\n\n      // Retry the original request with the new token\n      return axiosInstance(originalRequest);\n    } catch (refreshError) {\n      console.error(\"Token refresh error:\", refreshError); // Debug log\n      // Handle refresh token failure (e.g., redirect to login)\n      return Promise.reject(refreshError);\n    }\n  }\n  return Promise.reject(error);\n});\nexport default axiosInstance;\n\n// Example function to refresh the token (needs to be defined)\nconst refreshToken = async refreshToken => {\n  try {\n    const response = await axios.post(\"http://localhost:5000/api/auth/refresh\", {\n      refreshToken\n    });\n    return response.data;\n  } catch (error) {\n    var _error$response, _error$response$data;\n    const errorMessage = ((_error$response = error.response) === null || _error$response === void 0 ? void 0 : (_error$response$data = _error$response.data) === null || _error$response$data === void 0 ? void 0 : _error$response$data.error) || \"An unexpected error occurred\";\n    throw new Error(errorMessage);\n  }\n};","map":{"version":3,"names":["axios","axiosInstance","create","baseURL","headers","interceptors","request","use","config","token","localStorage","getItem","console","log","Authorization","error","Promise","reject","response","originalRequest","status","_retry","refreshToken","setItem","defaults","common","refreshError","post","data","_error$response","_error$response$data","errorMessage","Error"],"sources":["C:/PROJECTS/Recipe/frontend/src/services/axiosInstance.js"],"sourcesContent":["import axios from \"axios\";\r\n\r\n// Create an axios instance\r\nconst axiosInstance = axios.create({\r\n  baseURL: \"http://localhost:5000/api\", // Base URL of your API\r\n  headers: {\r\n    \"Content-Type\": \"application/json\",\r\n  },\r\n});\r\n\r\n// Request interceptor to add the auth token to headers\r\naxiosInstance.interceptors.request.use(\r\n  (config) => {\r\n    const token = localStorage.getItem(\"token\");\r\n    console.log(\"Intercepted request token:\", token); // Debug log\r\n    if (token) {\r\n      config.headers.Authorization = `Bearer ${token}`;\r\n    }\r\n    return config;\r\n  },\r\n  (error) => {\r\n    console.error(\"Request interceptor error:\", error); // Debug log\r\n    return Promise.reject(error);\r\n  }\r\n);\r\n\r\n// Response interceptor to handle token refresh\r\naxiosInstance.interceptors.response.use(\r\n  (response) => {\r\n    return response;\r\n  },\r\n  async (error) => {\r\n    const originalRequest = error.config;\r\n\r\n    // Check if the error is due to an expired token\r\n    if (\r\n      error.response &&\r\n      error.response.status === 401 &&\r\n      !originalRequest._retry\r\n    ) {\r\n      originalRequest._retry = true;\r\n\r\n      try {\r\n        // Attempt to refresh the token\r\n        const { refreshToken } = await refreshToken(\r\n          localStorage.getItem(\"refreshToken\")\r\n        );\r\n\r\n        // Save the new tokens\r\n        localStorage.setItem(\"token\", refreshToken);\r\n\r\n        // Update the Authorization header\r\n        axiosInstance.defaults.headers.common[\r\n          \"Authorization\"\r\n        ] = `Bearer ${refreshToken}`;\r\n\r\n        // Retry the original request with the new token\r\n        return axiosInstance(originalRequest);\r\n      } catch (refreshError) {\r\n        console.error(\"Token refresh error:\", refreshError); // Debug log\r\n        // Handle refresh token failure (e.g., redirect to login)\r\n        return Promise.reject(refreshError);\r\n      }\r\n    }\r\n\r\n    return Promise.reject(error);\r\n  }\r\n);\r\n\r\nexport default axiosInstance;\r\n\r\n// Example function to refresh the token (needs to be defined)\r\nconst refreshToken = async (refreshToken) => {\r\n  try {\r\n    const response = await axios.post(\r\n      \"http://localhost:5000/api/auth/refresh\",\r\n      {\r\n        refreshToken,\r\n      }\r\n    );\r\n    return response.data;\r\n  } catch (error) {\r\n    const errorMessage =\r\n      error.response?.data?.error || \"An unexpected error occurred\";\r\n    throw new Error(errorMessage);\r\n  }\r\n};\r\n"],"mappings":"AAAA,OAAOA,KAAK,MAAM,OAAO;;AAEzB;AACA,MAAMC,aAAa,GAAGD,KAAK,CAACE,MAAM,CAAC;EACjCC,OAAO,EAAE,2BAA2B;EAAE;EACtCC,OAAO,EAAE;IACP,cAAc,EAAE;EAClB;AACF,CAAC,CAAC;;AAEF;AACAH,aAAa,CAACI,YAAY,CAACC,OAAO,CAACC,GAAG,CACnCC,MAAM,IAAK;EACV,MAAMC,KAAK,GAAGC,YAAY,CAACC,OAAO,CAAC,OAAO,CAAC;EAC3CC,OAAO,CAACC,GAAG,CAAC,4BAA4B,EAAEJ,KAAK,CAAC,CAAC,CAAC;EAClD,IAAIA,KAAK,EAAE;IACTD,MAAM,CAACJ,OAAO,CAACU,aAAa,GAAG,UAAUL,KAAK,EAAE;EAClD;EACA,OAAOD,MAAM;AACf,CAAC,EACAO,KAAK,IAAK;EACTH,OAAO,CAACG,KAAK,CAAC,4BAA4B,EAAEA,KAAK,CAAC,CAAC,CAAC;EACpD,OAAOC,OAAO,CAACC,MAAM,CAACF,KAAK,CAAC;AAC9B,CACF,CAAC;;AAED;AACAd,aAAa,CAACI,YAAY,CAACa,QAAQ,CAACX,GAAG,CACpCW,QAAQ,IAAK;EACZ,OAAOA,QAAQ;AACjB,CAAC,EACD,MAAOH,KAAK,IAAK;EACf,MAAMI,eAAe,GAAGJ,KAAK,CAACP,MAAM;;EAEpC;EACA,IACEO,KAAK,CAACG,QAAQ,IACdH,KAAK,CAACG,QAAQ,CAACE,MAAM,KAAK,GAAG,IAC7B,CAACD,eAAe,CAACE,MAAM,EACvB;IACAF,eAAe,CAACE,MAAM,GAAG,IAAI;IAE7B,IAAI;MACF;MACA,MAAM;QAAEC;MAAa,CAAC,GAAG,MAAMA,YAAY,CACzCZ,YAAY,CAACC,OAAO,CAAC,cAAc,CACrC,CAAC;;MAED;MACAD,YAAY,CAACa,OAAO,CAAC,OAAO,EAAED,YAAY,CAAC;;MAE3C;MACArB,aAAa,CAACuB,QAAQ,CAACpB,OAAO,CAACqB,MAAM,CACnC,eAAe,CAChB,GAAG,UAAUH,YAAY,EAAE;;MAE5B;MACA,OAAOrB,aAAa,CAACkB,eAAe,CAAC;IACvC,CAAC,CAAC,OAAOO,YAAY,EAAE;MACrBd,OAAO,CAACG,KAAK,CAAC,sBAAsB,EAAEW,YAAY,CAAC,CAAC,CAAC;MACrD;MACA,OAAOV,OAAO,CAACC,MAAM,CAACS,YAAY,CAAC;IACrC;EACF;EAEA,OAAOV,OAAO,CAACC,MAAM,CAACF,KAAK,CAAC;AAC9B,CACF,CAAC;AAED,eAAed,aAAa;;AAE5B;AACA,MAAMqB,YAAY,GAAG,MAAOA,YAAY,IAAK;EAC3C,IAAI;IACF,MAAMJ,QAAQ,GAAG,MAAMlB,KAAK,CAAC2B,IAAI,CAC/B,wCAAwC,EACxC;MACEL;IACF,CACF,CAAC;IACD,OAAOJ,QAAQ,CAACU,IAAI;EACtB,CAAC,CAAC,OAAOb,KAAK,EAAE;IAAA,IAAAc,eAAA,EAAAC,oBAAA;IACd,MAAMC,YAAY,GAChB,EAAAF,eAAA,GAAAd,KAAK,CAACG,QAAQ,cAAAW,eAAA,wBAAAC,oBAAA,GAAdD,eAAA,CAAgBD,IAAI,cAAAE,oBAAA,uBAApBA,oBAAA,CAAsBf,KAAK,KAAI,8BAA8B;IAC/D,MAAM,IAAIiB,KAAK,CAACD,YAAY,CAAC;EAC/B;AACF,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}