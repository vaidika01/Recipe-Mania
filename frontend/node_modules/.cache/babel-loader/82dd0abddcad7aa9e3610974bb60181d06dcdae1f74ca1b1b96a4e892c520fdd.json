{"ast":null,"code":"const jwt = require(\"jsonwebtoken\");\nconst bcrypt = require(\"bcrypt\");\nconst {\n  User\n} = require(\"../models\"); // Replace with your User model\n\nconst authenticateUser = async (username, password) => {\n  const user = await User.findOne({\n    where: {\n      username\n    }\n  });\n  if (!user || !bcrypt.compareSync(password, user.password)) {\n    throw new Error(\"Invalid username or password\");\n  }\n  const accessToken = jwt.sign({\n    id: user.id,\n    username: user.username\n  }, process.env.ACCESS_TOKEN_SECRET, {\n    expiresIn: \"15m\"\n  });\n  const refreshToken = jwt.sign({\n    id: user.id,\n    username: user.username\n  }, process.env.REFRESH_TOKEN_SECRET, {\n    expiresIn: \"7d\"\n  });\n  return {\n    accessToken,\n    refreshToken\n  };\n};\nconst registerUser = async (username, password) => {\n  const hashedPassword = bcrypt.hashSync(password, 10);\n  await User.create({\n    username,\n    password: hashedPassword\n  });\n};\nmodule.exports = {\n  authenticateUser,\n  registerUser\n};","map":{"version":3,"names":["jwt","require","bcrypt","User","authenticateUser","username","password","user","findOne","where","compareSync","Error","accessToken","sign","id","process","env","ACCESS_TOKEN_SECRET","expiresIn","refreshToken","REFRESH_TOKEN_SECRET","registerUser","hashedPassword","hashSync","create","module","exports"],"sources":["C:/PROJECTS/Recipe/frontend/src/services/AuthService.js"],"sourcesContent":["const jwt = require(\"jsonwebtoken\");\r\nconst bcrypt = require(\"bcrypt\");\r\nconst { User } = require(\"../models\"); // Replace with your User model\r\n\r\nconst authenticateUser = async (username, password) => {\r\n  const user = await User.findOne({ where: { username } });\r\n  if (!user || !bcrypt.compareSync(password, user.password)) {\r\n    throw new Error(\"Invalid username or password\");\r\n  }\r\n\r\n  const accessToken = jwt.sign(\r\n    { id: user.id, username: user.username },\r\n    process.env.ACCESS_TOKEN_SECRET,\r\n    { expiresIn: \"15m\" }\r\n  );\r\n  const refreshToken = jwt.sign(\r\n    { id: user.id, username: user.username },\r\n    process.env.REFRESH_TOKEN_SECRET,\r\n    { expiresIn: \"7d\" }\r\n  );\r\n\r\n  return { accessToken, refreshToken };\r\n};\r\n\r\nconst registerUser = async (username, password) => {\r\n  const hashedPassword = bcrypt.hashSync(password, 10);\r\n  await User.create({ username, password: hashedPassword });\r\n};\r\n\r\nmodule.exports = { authenticateUser, registerUser };\r\n"],"mappings":"AAAA,MAAMA,GAAG,GAAGC,OAAO,CAAC,cAAc,CAAC;AACnC,MAAMC,MAAM,GAAGD,OAAO,CAAC,QAAQ,CAAC;AAChC,MAAM;EAAEE;AAAK,CAAC,GAAGF,OAAO,CAAC,WAAW,CAAC,CAAC,CAAC;;AAEvC,MAAMG,gBAAgB,GAAG,MAAAA,CAAOC,QAAQ,EAAEC,QAAQ,KAAK;EACrD,MAAMC,IAAI,GAAG,MAAMJ,IAAI,CAACK,OAAO,CAAC;IAAEC,KAAK,EAAE;MAAEJ;IAAS;EAAE,CAAC,CAAC;EACxD,IAAI,CAACE,IAAI,IAAI,CAACL,MAAM,CAACQ,WAAW,CAACJ,QAAQ,EAAEC,IAAI,CAACD,QAAQ,CAAC,EAAE;IACzD,MAAM,IAAIK,KAAK,CAAC,8BAA8B,CAAC;EACjD;EAEA,MAAMC,WAAW,GAAGZ,GAAG,CAACa,IAAI,CAC1B;IAAEC,EAAE,EAAEP,IAAI,CAACO,EAAE;IAAET,QAAQ,EAAEE,IAAI,CAACF;EAAS,CAAC,EACxCU,OAAO,CAACC,GAAG,CAACC,mBAAmB,EAC/B;IAAEC,SAAS,EAAE;EAAM,CACrB,CAAC;EACD,MAAMC,YAAY,GAAGnB,GAAG,CAACa,IAAI,CAC3B;IAAEC,EAAE,EAAEP,IAAI,CAACO,EAAE;IAAET,QAAQ,EAAEE,IAAI,CAACF;EAAS,CAAC,EACxCU,OAAO,CAACC,GAAG,CAACI,oBAAoB,EAChC;IAAEF,SAAS,EAAE;EAAK,CACpB,CAAC;EAED,OAAO;IAAEN,WAAW;IAAEO;EAAa,CAAC;AACtC,CAAC;AAED,MAAME,YAAY,GAAG,MAAAA,CAAOhB,QAAQ,EAAEC,QAAQ,KAAK;EACjD,MAAMgB,cAAc,GAAGpB,MAAM,CAACqB,QAAQ,CAACjB,QAAQ,EAAE,EAAE,CAAC;EACpD,MAAMH,IAAI,CAACqB,MAAM,CAAC;IAAEnB,QAAQ;IAAEC,QAAQ,EAAEgB;EAAe,CAAC,CAAC;AAC3D,CAAC;AAEDG,MAAM,CAACC,OAAO,GAAG;EAAEtB,gBAAgB;EAAEiB;AAAa,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}